[{"/home/edward/code/home-monitor/client/src/index.js":"1","/home/edward/code/home-monitor/client/src/App.js":"2","/home/edward/code/home-monitor/client/src/store.js":"3","/home/edward/code/home-monitor/client/src/routes/PublicRoute.js":"4","/home/edward/code/home-monitor/client/src/routes/PrivateRoute.js":"5","/home/edward/code/home-monitor/client/src/components/admin/Navigation.js":"6","/home/edward/code/home-monitor/client/src/components/Login.js":"7","/home/edward/code/home-monitor/client/src/reducers/rootReducer.js":"8","/home/edward/code/home-monitor/client/src/components/admin/Map.js":"9","/home/edward/code/home-monitor/client/src/components/admin/Hospitals.js":"10","/home/edward/code/home-monitor/client/src/components/admin/Device.js":"11","/home/edward/code/home-monitor/client/src/components/socket.js":"12","/home/edward/code/home-monitor/client/src/reducers/deviceReducer.js":"13","/home/edward/code/home-monitor/client/src/reducers/hospitalReducer.js":"14","/home/edward/code/home-monitor/client/src/components/admin/mapStyles.js":"15","/home/edward/code/home-monitor/client/src/actions/hospitalActions.js":"16","/home/edward/code/home-monitor/client/src/actions/deviceActions.js":"17","/home/edward/code/home-monitor/client/src/actions/actionTypes.js":"18","/home/edward/code/home-monitor/client/src/reducers/homeReducer.js":"19","/home/edward/code/home-monitor/client/src/components/admin/Homes.js":"20","/home/edward/code/home-monitor/client/src/actions/homeActions.js":"21","/home/edward/code/home-monitor/client/src/components/admin/Logs.js":"22","/home/edward/code/home-monitor/client/src/components/Welcome.js":"23","/home/edward/code/home-monitor/client/src/components/Signup.js":"24"},{"size":487,"mtime":1670611865402,"results":"25","hashOfConfig":"26"},{"size":320,"mtime":1670722733530,"results":"27","hashOfConfig":"26"},{"size":324,"mtime":1670611865402,"results":"28","hashOfConfig":"26"},{"size":434,"mtime":1670630540866,"results":"29","hashOfConfig":"26"},{"size":431,"mtime":1670630514676,"results":"30","hashOfConfig":"26"},{"size":4971,"mtime":1670722359750,"results":"31","hashOfConfig":"26"},{"size":5774,"mtime":1670611865402,"results":"32","hashOfConfig":"26"},{"size":326,"mtime":1670631358276,"results":"33","hashOfConfig":"26"},{"size":4320,"mtime":1670611865402,"results":"34","hashOfConfig":"26"},{"size":11503,"mtime":1670611865402,"results":"35","hashOfConfig":"26"},{"size":5498,"mtime":1670611865402,"results":"36","hashOfConfig":"26"},{"size":57,"mtime":1670611865402,"results":"37","hashOfConfig":"26"},{"size":1181,"mtime":1670611865402,"results":"38","hashOfConfig":"26"},{"size":947,"mtime":1670611865402,"results":"39","hashOfConfig":"26"},{"size":4837,"mtime":1670611865402,"results":"40","hashOfConfig":"26"},{"size":819,"mtime":1670611865402,"results":"41","hashOfConfig":"26"},{"size":1110,"mtime":1670611865402,"results":"42","hashOfConfig":"26"},{"size":415,"mtime":1670630718896,"results":"43","hashOfConfig":"26"},{"size":821,"mtime":1670630811736,"results":"44","hashOfConfig":"26"},{"size":9044,"mtime":1670721205880,"results":"45","hashOfConfig":"26"},{"size":587,"mtime":1670664276164,"results":"46","hashOfConfig":"26"},{"size":2076,"mtime":1671196408000,"results":"47","hashOfConfig":"26"},{"size":1701,"mtime":1670722603170,"results":"48","hashOfConfig":"26"},{"size":11466,"mtime":1670611865402,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"v3ioy1",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/home/edward/code/home-monitor/client/src/index.js",[],["111","112"],"/home/edward/code/home-monitor/client/src/App.js",["113"],"import Navigation from './components/admin/Navigation';\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport Welcome from './components/Welcome';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Navigation />\n      {/* <Welcome /> */}\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","/home/edward/code/home-monitor/client/src/store.js",[],"/home/edward/code/home-monitor/client/src/routes/PublicRoute.js",["114"],"// import React, {useState, useEffect, useContext} from 'react'\nimport React, {useContext} from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n// import {LecturerContext} from '../../context/LecturerContext'\n\nconst PublicRoute = (props) => {\n    const {children, ...rest} = props\n    const isAuth = localStorage.getItem(\"isAuthenticated\")\n    // const [isAuthenticated, setIsAuthenticated] = useState(null)\n    // useEffect(() => {\n    //     const authState = localStorage.getItem(\"isAuthenticated\")\n    //     setIsAuthenticated(authState)\n    // }, [])\n\n    // const {state} = useContext(LecturerContext)\n\n    return(\n        <Route\n            {...rest}\n            render = { () => {\n                // return state.isAuthenticated || isAuth === \"true\" ? <Redirect to=\"/dashboard\" /> : children\n                return isAuth === \"true\" ? <Redirect to=\"/dashboard\" /> : children\n            }}\n         />\n    )\n}\n\nexport default PublicRoute",["115","116"],"/home/edward/code/home-monitor/client/src/routes/PrivateRoute.js",["117"],"// import React, {useEffect, useState, useContext} from 'react'\nimport React, {useContext} from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n// import {LecturerContext} from '../../context/LecturerContext'\n\nconst PrivateRoute = (props) => {\n    const {children, ...rest} = props\n    const isAuth = localStorage.getItem(\"isAuthenticated\")\n    // const [isAuthenticated, setIsAuthenticated] = useState(null)\n    // useEffect(() => {\n    //     const authState = localStorage.getItem(\"isAuthenticated\")\n    //     setIsAuthenticated(authState)\n    // }, [])\n\n    // const {state} = useContext(LecturerContext)\n\n    return(\n        <Route\n            {...rest}\n            render = { () => {\n                // return state.isAuthenticated || isAuth === \"true\" ? children : <Redirect to=\"/signin\" />\n                return isAuth === \"true\" ? children : <Redirect to=\"/login\" />\n            }}\n        />\n    )\n}\n\nexport default PrivateRoute","/home/edward/code/home-monitor/client/src/components/admin/Navigation.js",[],"/home/edward/code/home-monitor/client/src/components/Login.js",["118","119"],"// import React, { Component } from 'react'\n// import {\n//     Form,\n//     FormGroup,\n//     Label,\n//     Input,\n//     Button\n// } from 'reactstrap'\n\n// class Login extends Component {\n    \n//     state = {\n//         email: \"\",\n//         password: \"\"\n//     }\n\n//     handleInput = (event) => {\n//         this.setState({[event.target.name] : event.target.value})\n//     }\n\n//     submitForm = () => {\n\n//     }\n\n//     render(){\n//         return(\n//             <Form>\n//                 <FormGroup>\n//                     <Label for=\"email\">Email</Label>\n//                     <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter email address\" onChange={this.handleInput} />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"password\">Password</Label>\n//                     <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"enter password\" onChange={this.handleInput} />\n//                 </FormGroup>\n//                 <Button onClick={this.submitForm} color=\"danger\">Login</Button>\n//             </Form>\n//         )\n//     }\n// }\n\n// export default Login\n\n// \n\nimport React, {useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {useHistory} from 'react-router-dom'\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://source.unsplash.com/random)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  // Static Authentication credentials\n  const EMAIL = \"admin@gmail.com\"\n  const PASSWORD = \"admin\"\n\n  const routeHistory = useHistory()\n\n  const compareDetails = () => {\n    if(email === EMAIL && password === PASSWORD){\n      localStorage.setItem(\"isAuthenticated\", \"true\")\n    }else{\n      localStorage.setItem(\"isAuthenticated\", \"false\")\n    }\n    routeHistory.push(\"/dashboard\")\n  }\n\n  // const formSubmit = (e) => {\n  //   e.preventDefault()\n  // }\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              onChange={(event) => setEmail(event.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={(event) => setPassword(event.target.value)}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              // type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={compareDetails}\n            >\n              Sign In\n            </Button>\n            {/* <Grid container>\n              <Grid item xs>\n                <Link href=\"#\" variant=\"body2\">\n                  Forgot password?\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link href=\"#\" variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box> */}\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}","/home/edward/code/home-monitor/client/src/reducers/rootReducer.js",[],"/home/edward/code/home-monitor/client/src/components/admin/Map.js",[],"/home/edward/code/home-monitor/client/src/components/admin/Hospitals.js",["120","121","122","123"],"import React, {Component} from 'react'\nimport {\n    ListGroup,\n    ListGroupItem,\n    ListGroupItemHeading,\n    ListGroupItemText,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Row\n} from 'reactstrap'\n\nimport {connect} from 'react-redux'\n\nimport {addHospital, getHospitals} from '../../actions/hospitalActions'\n\n// import axios from 'axios'\nclass Hospital extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            newHospital: {\n                hospitalName: \"\",\n                address: \"\",\n                email: \"\",\n                latitude: null,\n                longitude: null,\n                phonePrimary: \"\",\n                phoneSecondary: \"\",\n                numOfAmbulance: \"\",\n            },\n            modal: false,\n            search: null,\n            matrix: [...props.matrix]\n        }\n    }\n\n    componentDidMount(){\n        // function to get all hospitals\n        this.props.getHospitals()\n        // this.hospitalDistance()\n    }\n\n/**\n    // Format the url\n    formatUrl = (url, origins, destinations) => {\n        const {api_key} = this.props\n        let newUrl = `${url}&origins=${origins.latitude},${origins.longitude}&destinations=`\n        for (let i = 0; i <= destinations.length - 1; i++){\n            if(i == destinations.length - 1){\n                newUrl = `${newUrl}${destinations[i].geometry.coordinates[0]}%2C${destinations[i].geometry.coordinates[1]}&key=${api_key}`\n                break;\n            }\n            newUrl = `${newUrl}${destinations[i].geometry.coordinates[0]}%2C${destinations[i].geometry.coordinates[1]}%7C`\n        }\n        return newUrl;\n    }\n\n    // Function to calculate disstance from device to all hospitals\n    hospitalDistance = () => {\n        const originLoc = this.props.devLoc\n        let allHospitals = this.props.hospitals.hospitalPositions\n        // console.log(\"Device Location: \", originLoc)\n        // console.log(\"All Hospitals: \", allHospitals)\n        let hospitalsWithDistance = []\n        let gUrl = this.formatUrl(\"https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial\", \n        originLoc, allHospitals)\n        console.log(\"New Before Axios Request\")\n        // axios.get(gUrl, {headers: {\n        //     'Access-Control-Allow-Origin': '*',\n        //     'Access-Control-Allow-Methods' : 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n        //   }}).then((resp) => {\n        const headers = { 'Content-Type': 'application/json', 'mode': 'no-cors'}\n        fetch(gUrl, { headers })\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Axios Request\")\n                let hosDistance = data.rows[0].elements\n                hospitalsWithDistance = allHospitals.map((hospital, index) => {\n                    return {hospital, distance: hosDistance[index]}\n                })\n            })\n\n        console.log(hospitalsWithDistance)\n    }\n\n*/\n    // Action to create new hospital\n    newHospital = () => {\n        const newHospital = {\n            properties: {\n                hospitalName: this.state.newHospital.hospitalName,\n                address: this.state.newHospital.address,\n                email: this.state.newHospital.email,\n                phonePrimary: this.state.newHospital.phonePrimary,\n                phoneSecondary: this.state.newHospital.phoneSecondary,\n                numOfAmbulance: this.state.newHospital.numOfAmbulance,\n            },\n            geometry: {\n                coordinates: [Number(this.state.newHospital.longitude), Number(this.state.newHospital.latitude)]\n            }\n        }\n        console.log(newHospital)\n        this.props.addHospital(newHospital)\n\n        // Check to see if add was successful and then call toggle\n        this.toggleModal()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    hospitalInput = (event) => {\n        this.setState({...this.state, newHospital : {...this.state.newHospital, [event.target.name] : event.target.value}})\n    }\n\n    searchByName = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value})\n    }\n\n    myDistance = (myId) => {\n        if(this.props.matrix.length < 1){\n            return 0\n        }\n        let mDistance = this.props.matrix.filter(matrix => {\n            if(matrix.hospital._id == myId){\n                return true\n            }\n        });\n        return mDistance[0].distance.distance.text\n        // console.log(\"nDistance\",mDistance[0].distance.distance.text)\n    }\n\n    callColor = (myId) => {\n        if(this.props.matrix.length < 1){\n            return {color:\"blue\"}\n        }\n        let dist;\n        if(myId == this.props.minId){\n            dist = {color:\"green\"}\n        }else{\n            dist = {color:\"red\"}\n        }\n        return dist\n        // return mColor[0].distance.distance.text\n    }\n\n    render(){\n\n        const {hospitalPositions} = this.props.hospitals\n        // console.log(\"this.props.matrix: \", this.props.matrix)\n\n        return(\n            <div className=\"container\">\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"name\">Hospital Name</Label>\n                                <Input type=\"name\" name=\"hospitalName\" id=\"hospitalName\" placeholder=\"Enter name of hospital\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"email\">Email</Label>\n                                <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter email address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"address\">Address</Label>\n                                <Input type=\"text\" name=\"address\" id=\"address\" placeholder=\"Enter address\" onChange={this.hospitalInput} />\n                            </FormGroup>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"latitude\">Latitude</Label>\n                                        <Input type=\"number\" name=\"latitude\" id=\"latitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"longitude\">Longitude</Label>\n                                        <Input type=\"number\" name=\"longitude\" id=\"longitude\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phonePrimary\">Phone 1</Label>\n                                        <Input type=\"tel\" name=\"phonePrimary\" id=\"phonePrimary\" placeholder=\"Enter Modile Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phoneSecondary\">Phone 2</Label>\n                                        <Input type=\"tel\" name=\"phoneSecondary\" id=\"phoneSecondary\" placeholder=\"Enter Office Phone\" onChange={this.hospitalInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <FormGroup>\n                                <Label for=\"numOfAmbulance\">No. of Ambulance</Label>\n                                <Input type=\"select\" name=\"numOfAmbulance\" id=\"numOfAmbulance\" onChange={this.hospitalInput} >\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                    <option value=\"5\">5</option>\n                                    <option value=\"6\">6</option>\n                                    <option value=\"7\">7</option>\n                                    <option value=\"8\">8</option>\n                                </Input>\n                            </FormGroup>\n                            <Button onClick={this.newHospital} color=\"dark\" block>Add Hospital</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Create</Button>\n                <hr />\n                <Input type=\"text\" name=\"search\" placeholder=\"Search Hospital by name\" onChange={this.searchByName} />\n                <br />\n                <ListGroup>\n                    {\n                        hospitalPositions.filter(hospital => {\n                            if(this.state.search == null){\n                                return hospital\n                            }else if(hospital.properties.hospitalName.toLowerCase().includes(this.state.search.toLowerCase())){\n                                return hospital\n                            }\n                        })\n                        .map((hospital, hIndex) =>\n                            <div key={hospital.properties.id}>\n                                <ListGroupItem>\n                                    <ListGroupItemHeading>{hospital.properties.hospitalName}</ListGroupItemHeading>\n                                    <ListGroupItemText>\n                                        {hospital.properties.address}<br />\n                                        Phone: {hospital.properties.phonePrimary}   |   Email: {hospital.properties.email}<br />\n                                        Ambulance Vehicles: {hospital.properties.numOfAmbulance}<br />\n                                        Latitude: {hospital.geometry.coordinates[0]} | Longitude: {hospital.geometry.coordinates[1]}\n                                    </ListGroupItemText>\n                                    <hr />\n                                    <ListGroupItemText style={this.callColor(hospital.properties.id)}>\n                                        <strong>\n                                            Distance: {this.myDistance(hospital.properties.id)}\n                                        </strong>\n                                    </ListGroupItemText>\n                                </ListGroupItem>\n                                <br />\n                            </div> \n                        )\n                    }\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {addHospital, getHospitals})(Hospital)","/home/edward/code/home-monitor/client/src/components/admin/Device.js",["124"],"import React, {Component} from 'react'\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n    CardSubtitle,\n    CardText,\n    Button,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Badge\n} from 'reactstrap'\nimport {connect} from 'react-redux'\nimport { getDevices, getDistance, addDevice } from '../../actions/deviceActions'\n// Socket IO import\nimport socket from '../socket'\n\nclass Device extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            device: {\n            },\n            distance: {\n            },\n            deviceName: \"\",\n            deviceId: \"\",\n            modal: false,\n            devLoc: props.devLoc,\n        }\n        console.log(\"Client: Has connected to server socket\")\n        socket.on(\"updateAgain\", (sensorData) => {\n            props.getDevices()\n            props.getDevices()\n            // console.log(\"Socket Update Again\")\n        })\n    }\n    \n    componentDidMount(){\n        this.props.getDevices()\n        // this.props.getDistance()\n        \n    }\n\n    refreshData = () => {\n        this.props.getDevices()\n        this.props.getDistance()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    deviceInput = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value })\n    }\n\n    updateDevice = () => {\n        const deviceDetails = {\n            deviceName: this.state.deviceName,\n            deviceId: this.state.deviceId\n        }\n        this.props.addDevice(deviceDetails)\n    }\n\n    render(){\n        const {devicePositions} = this.props.devices\n        console.log(this.state.devLoc)\n        return(\n            <div className=\"container\" style={{marginTop: \"2rem\"}}>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Edit Device</Button>\n                {/*  */}\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Hospital</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"deviceName\">Device Name</Label>\n                                <Input type=\"name\" name=\"deviceName\" id=\"deviceName\" placeholder=\"Enter a new name for Device\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"deviceId\">Device ID</Label>\n                                <Input type=\"name\" name=\"deviceId\" id=\"deviceId\" placeholder=\"Enter an ID\" onChange={this.deviceInput} />\n                            </FormGroup>\n                            <Button onClick={this.updateDevice} color=\"dark\" block>Save</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                {/*  */}\n                {\n                    devicePositions.map(device => {\n                        const {deviceName, deviceId, address, accX, accY, accZ, latitude, longitude, lastUpdate, shock} = device\n                        // const {latitude, longitude, accX, accY, accZ, shock} = this.props.devLoc \n                            return(\n                                <div key={device.id}>\n                                    <Card md=\"10\" xs=\"6\" sm=\"8\">\n                                        {/* <CardImg top width=\"\" src=\"/dev3.jpg\" alt=\"Card image cap\" /> */}\n                                        <img width=\"10%\" src=\"/dev3.jpg\" alt=\"device\" />\n                                        <CardBody>\n                                            <CardTitle tag=\"h5\">Name: {`${deviceName}`}</CardTitle>\n                                            <CardSubtitle tag=\"h7\" className=\"mb-2 text-muted\">ID: {`${deviceId}`}</CardSubtitle><br />\n                                            Shock State: <Badge pill color={shock ? \"danger\": \"primary\"}>{`${shock ? \"TRUE\" : \"FALSE\"}`}</Badge><br />\n                                            Address: <Badge pill>{`${address}`}</Badge><br />\n                                            {/* Latitude: <Badge color=\"secondary\" pill>{`${coordinates[0]}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${coordinates[1]}`}</Badge><br /> */}\n                                            Latitude: <Badge color=\"secondary\" pill>{`${latitude}`}</Badge><br />\n                                            Longitude: <Badge pill>{`${longitude}`}</Badge><br />\n                                            Accelerometer::   X: <Badge pill>{`${accX}`}</Badge>   Y: <Badge pill>{`${accY}`}</Badge>   Z: <Badge pill>{`${accZ}`}</Badge><br />\n                                            Last Update: <Badge pill>{`${lastUpdate}`}</Badge><br /><br />\n                                            <Button color=\"dark\" onClick={this.refreshData}>Refresh</Button>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            )\n                        }\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    devices: state.devices,\n    hospitals: state.hospitals\n})\n\nexport default connect(mapStateToProps, {getDevices, getDistance, addDevice})(Device)","/home/edward/code/home-monitor/client/src/components/socket.js",[],"/home/edward/code/home-monitor/client/src/reducers/deviceReducer.js",["125"],"import * as deviceData from '../data/deviceData.json'\nimport {ADD_DEVICE, DELETE_DEVICE, GET_DEVICES, GET_DISTANCE} from '../actions/actionTypes'\n\nconst initialState = {\n            // devicePositions: deviceData.default.features,\n            devicePositions: [],\n            // distances: []\n        }\n\nconst deviceReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_DEVICES:\n            return {\n                ...state,\n                devicePositions: action.payload\n\n            }\n        case GET_DISTANCE:\n            return {\n                ...state,\n                distances: action.payload\n\n            }\n        \n        // **************************** TESTING ***********************************\n        case ADD_DEVICE:\n            return {\n                ...state,\n                devicePositions: [action.payload, ...state.devicePositions]\n            }\n        case DELETE_DEVICE:\n            return {\n                ...state,\n                devicePositions: [state.devicePositions.filter(devPos => devPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default deviceReducer","/home/edward/code/home-monitor/client/src/reducers/hospitalReducer.js",["126"],"import * as hospitalData from '../data/hospitalData.json'\nimport {ADD_HOSPITAL, DELETE_HOSPITAL, GET_HOSPITALS} from '../actions/actionTypes'\n\nconst initialState = {\n            // hospitalPositions: hospitalData.default.features\n            hospitalPositions: []\n        }\n\nconst hospitalReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_HOSPITALS:\n            return {\n                ...state,\n                hospitalPositions: action.payload\n            }\n        case ADD_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [action.payload, ...state.hospitalPositions]\n            }\n        case DELETE_HOSPITAL:\n            return {\n                ...state,\n                hospitalPositions: [state.hospitalPositions.filter(hosPos => hosPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default hospitalReducer","/home/edward/code/home-monitor/client/src/components/admin/mapStyles.js",["127"],"export default [\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#597c84\"\n            },\n            {\n                \"lightness\": \"-37\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative.province\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"lightness\": \"0\"\n            },\n            {\n                \"saturation\": \"0\"\n            },\n            {\n                \"color\": \"#f5f5f2\"\n            },\n            {\n                \"gamma\": \"1\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.man_made\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"lightness\": \"-3\"\n            },\n            {\n                \"gamma\": \"1.00\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.natural.terrain\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#bae5ce\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": -100\n            },\n            {\n                \"lightness\": 45\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#fac9a9\"\n            },\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"labels.text\",\n        \"stylers\": [\n            {\n                \"color\": \"#4e4e4e\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#787878\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.airport\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"hue\": \"#0a00ff\"\n            },\n            {\n                \"saturation\": \"-77\"\n            },\n            {\n                \"gamma\": \"0.57\"\n            },\n            {\n                \"lightness\": \"0\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.rail\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#43321e\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station.rail\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"hue\": \"#ff6c00\"\n            },\n            {\n                \"lightness\": \"4\"\n            },\n            {\n                \"gamma\": \"0.75\"\n            },\n            {\n                \"saturation\": \"-68\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"color\": \"#eaf6f8\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#a8d7d8\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"lightness\": \"-49\"\n            },\n            {\n                \"saturation\": \"-53\"\n            },\n            {\n                \"gamma\": \"0.79\"\n            }\n        ]\n    }\n]","/home/edward/code/home-monitor/client/src/actions/hospitalActions.js",[],"/home/edward/code/home-monitor/client/src/actions/deviceActions.js",[],"/home/edward/code/home-monitor/client/src/actions/actionTypes.js",[],"/home/edward/code/home-monitor/client/src/reducers/homeReducer.js",["128"],"import * as homeData from '../data/hospitalData.json'\nimport {ADD_HOME, DELETE_HOME, GET_HOME} from '../actions/actionTypes'\n\nconst initialState = {\n            homePositions: []\n        }\n\nconst homeReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_HOME:\n            return {\n                ...state,\n                homePositions: action.payload\n            }\n        case ADD_HOME:\n            return {\n                ...state,\n                homePositions: [action.payload, ...state.homePositions]\n            }\n        case DELETE_HOME:\n            return {\n                ...state,\n                homePositions: [state.homePositions.filter(hosPos => hosPos.id !== action.payload)]\n            }\n        default:\n            return state\n    }\n}\n\nexport default homeReducer","/home/edward/code/home-monitor/client/src/components/admin/Homes.js",["129","130","131","132","133","134"],"import React, {Component} from 'react'\nimport {\n    ListGroup,\n    ListGroupItem,\n    ListGroupItemHeading,\n    ListGroupItemText,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Row\n} from 'reactstrap'\n\nimport {connect} from 'react-redux'\n\nimport { addHome, deleteHome, getHomes } from '../../actions/homeActions'\n\n// import axios from 'axios'\nclass Homes extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            newHome: {\n                address: \"\",\n                email: \"\",\n                latitude: null,\n                longitude: null,\n                phone: \"\",\n            },\n            modal: false,\n            search: null,\n            matrix: [...props.matrix]\n        }\n    }\n\n    componentDidMount(){\n        // function to get all hospitals\n        this.props.getHomes()\n        // this.hospitalDistance()\n    }\n\n/**\n    // Format the url\n    formatUrl = (url, origins, destinations) => {\n        const {api_key} = this.props\n        let newUrl = `${url}&origins=${origins.latitude},${origins.longitude}&destinations=`\n        for (let i = 0; i <= destinations.length - 1; i++){\n            if(i == destinations.length - 1){\n                newUrl = `${newUrl}${destinations[i].geometry.coordinates[0]}%2C${destinations[i].geometry.coordinates[1]}&key=${api_key}`\n                break;\n            }\n            newUrl = `${newUrl}${destinations[i].geometry.coordinates[0]}%2C${destinations[i].geometry.coordinates[1]}%7C`\n        }\n        return newUrl;\n    }\n\n    // Function to calculate disstance from device to all hospitals\n    hospitalDistance = () => {\n        const originLoc = this.props.devLoc\n        let allHospitals = this.props.hospitals.hospitalPositions\n        // console.log(\"Device Location: \", originLoc)\n        // console.log(\"All Hospitals: \", allHospitals)\n        let hospitalsWithDistance = []\n        let gUrl = this.formatUrl(\"https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial\", \n        originLoc, allHospitals)\n        console.log(\"New Before Axios Request\")\n        // axios.get(gUrl, {headers: {\n        //     'Access-Control-Allow-Origin': '*',\n        //     'Access-Control-Allow-Methods' : 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n        //   }}).then((resp) => {\n        const headers = { 'Content-Type': 'application/json', 'mode': 'no-cors'}\n        fetch(gUrl, { headers })\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"Axios Request\")\n                let hosDistance = data.rows[0].elements\n                hospitalsWithDistance = allHospitals.map((hospital, index) => {\n                    return {hospital, distance: hosDistance[index]}\n                })\n            })\n\n        console.log(hospitalsWithDistance)\n    }\n\n*/\n    // Action to create new hospital\n    newHome = () => {\n        const newHome = {\n            properties: {\n                address: this.state.newHome.address,\n                email: this.state.newHome.email,\n                phone: this.state.newHome.phonePrimary,\n            },\n            geometry: {\n                coordinates: [Number(this.state.newHome.longitude), Number(this.state.newHome.latitude)]\n            }\n        }\n        console.log(newHome)\n        this.props.addHome(newHome)\n\n        // Check to see if add was successful and then call toggle\n        this.toggleModal()\n    }\n\n    toggleModal = () => {\n        this.setState({modal: !this.state.modal})\n    }\n\n    homeInput = (event) => {\n        this.setState({...this.state, newHome : {...this.state.newHome, [event.target.name] : event.target.value}})\n    }\n\n    searchByName = (event) => {\n        this.setState({...this.state, [event.target.name] : event.target.value})\n    }\n\n    myDistance = (myId) => {\n        if(this.props.matrix.length < 1){\n            return 0\n        }\n        let mDistance = this.props.matrix.filter(matrix => {\n            if(matrix.home._id == myId){\n                return true\n            }\n        });\n        return mDistance[0].distance.distance.text\n        // console.log(\"nDistance\",mDistance[0].distance.distance.text)\n    }\n\n    callColor = (myId) => {\n        if(this.props.matrix.length < 1){\n            return {color:\"blue\"}\n        }\n        let dist;\n        if(myId == this.props.minId){\n            dist = {color:\"green\"}\n        }else{\n            dist = {color:\"red\"}\n        }\n        return dist\n        // return mColor[0].distance.distance.text\n    }\n\n    render(){\n\n        const {homePositions} = this.props.homes\n        // console.log(\"this.props.matrix: \", this.props.matrix)\n\n        return(\n            <div className=\"container\">\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Add Your Home</ModalHeader>\n                    <ModalBody>\n                    <div>\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"email\">Email</Label>\n                                <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Enter email address\" onChange={this.homeInput} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"address\">Address</Label>\n                                <Input type=\"text\" name=\"address\" id=\"address\" placeholder=\"Enter address\" onChange={this.homeInput} />\n                            </FormGroup>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"latitude\">Latitude</Label>\n                                        <Input type=\"number\" name=\"latitude\" id=\"latitude\" onChange={this.homeInput} />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"longitude\">Longitude</Label>\n                                        <Input type=\"number\" name=\"longitude\" id=\"longitude\" onChange={this.homeInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"phonePrimary\">Phone</Label>\n                                        <Input type=\"tel\" name=\"phone\" id=\"phone\" placeholder=\"Enter Modile Phone\" onChange={this.homeInput} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Button onClick={this.newHome} color=\"dark\" block>Add Home</Button>\n                        </Form>\n                    </div>\n                    </ModalBody>\n                </Modal>\n                <Button onClick={this.toggleModal} color=\"dark\" block style={{marginBottom:\"1.5rem\"}}>Create</Button>\n                <hr />\n                <br />\n                <ListGroup>\n                    {\n                        homePositions.filter(home => {\n                            if(this.state.search == null){\n                                return home\n                            }else if(home.properties.homeName.toLowerCase().includes(this.state.search.toLowerCase())){\n                                return home\n                            }\n                        })\n                        .map((home, hIndex) =>\n                            <div key={home.properties.id}>\n                                <ListGroupItem>\n                                    <ListGroupItemText>\n                                        {home.properties.address}<br />\n                                        Phone: {home.properties.phonePrimary}   |   Email: {home.properties.email}<br />\n                                        Latitude: {home.geometry.coordinates[0]} | Longitude: {home.geometry.coordinates[1]}\n                                    </ListGroupItemText>\n                                    <hr />\n                                    <ListGroupItemText style={this.callColor(home.properties.id)}>\n                                        <strong>\n                                            Distance: {this.myDistance(home.properties.id)}\n                                        </strong>\n                                    </ListGroupItemText>\n                                </ListGroupItem>\n                                <br />\n                            </div> \n                        )\n                    }\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    homes: state.homes\n})\n\nexport default connect(mapStateToProps, {addHome, getHomes})(Homes)","/home/edward/code/home-monitor/client/src/actions/homeActions.js",[],"/home/edward/code/home-monitor/client/src/components/admin/Logs.js",["135"],"/home/edward/code/home-monitor/client/src/components/Welcome.js",[],"/home/edward/code/home-monitor/client/src/components/Signup.js",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":4,"column":8,"nodeType":"142","messageId":"143","endLine":4,"endColumn":15},{"ruleId":"140","severity":1,"message":"144","line":2,"column":16,"nodeType":"142","messageId":"143","endLine":2,"endColumn":26},{"ruleId":"136","replacedBy":"145"},{"ruleId":"138","replacedBy":"146"},{"ruleId":"140","severity":1,"message":"144","line":2,"column":16,"nodeType":"142","messageId":"143","endLine":2,"endColumn":26},{"ruleId":"140","severity":1,"message":"147","line":55,"column":8,"nodeType":"142","messageId":"143","endLine":55,"endColumn":11},{"ruleId":"140","severity":1,"message":"148","line":62,"column":10,"nodeType":"142","messageId":"143","endLine":62,"endColumn":19},{"ruleId":"149","severity":1,"message":"150","line":132,"column":57,"nodeType":"151","messageId":"152","endLine":132,"endColumn":59},{"ruleId":"153","severity":1,"message":"154","line":133,"column":36,"nodeType":"155","messageId":"156","endLine":133,"endColumn":38},{"ruleId":"153","severity":1,"message":"154","line":146,"column":17,"nodeType":"155","messageId":"156","endLine":146,"endColumn":19},{"ruleId":"149","severity":1,"message":"150","line":231,"column":59,"nodeType":"151","messageId":"152","endLine":231,"endColumn":61},{"ruleId":"140","severity":1,"message":"157","line":7,"column":5,"nodeType":"142","messageId":"143","endLine":7,"endColumn":13},{"ruleId":"140","severity":1,"message":"158","line":1,"column":13,"nodeType":"142","messageId":"143","endLine":1,"endColumn":23},{"ruleId":"140","severity":1,"message":"159","line":1,"column":13,"nodeType":"142","messageId":"143","endLine":1,"endColumn":25},{"ruleId":"160","severity":1,"message":"161","line":1,"column":1,"nodeType":"162","endLine":236,"endColumn":2},{"ruleId":"140","severity":1,"message":"163","line":1,"column":13,"nodeType":"142","messageId":"143","endLine":1,"endColumn":21},{"ruleId":"140","severity":1,"message":"164","line":5,"column":5,"nodeType":"142","messageId":"143","endLine":5,"endColumn":25},{"ruleId":"140","severity":1,"message":"165","line":21,"column":19,"nodeType":"142","messageId":"143","endLine":21,"endColumn":29},{"ruleId":"149","severity":1,"message":"150","line":126,"column":57,"nodeType":"151","messageId":"152","endLine":126,"endColumn":59},{"ruleId":"153","severity":1,"message":"154","line":127,"column":32,"nodeType":"155","messageId":"156","endLine":127,"endColumn":34},{"ruleId":"153","severity":1,"message":"154","line":140,"column":17,"nodeType":"155","messageId":"156","endLine":140,"endColumn":19},{"ruleId":"149","severity":1,"message":"150","line":201,"column":51,"nodeType":"151","messageId":"152","endLine":201,"endColumn":53},{"ruleId":"166","severity":1,"message":"167","line":26,"column":8,"nodeType":"168","endLine":26,"endColumn":20,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'Welcome' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.",["170"],["171"],"'Box' is defined but never used.","'Copyright' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CardText' is defined but never used.","'deviceData' is defined but never used.","'hospitalData' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'homeData' is defined but never used.","'ListGroupItemHeading' is defined but never used.","'deleteHome' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deviceLogs'. Either include it or remove the dependency array. You can also do a functional update 'setDeviceLogs(d => ...)' if you only need 'deviceLogs' in the 'setDeviceLogs' call.","ArrayExpression",["172"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},"Update the dependencies array to be: [deviceData, deviceLogs]",{"range":"175","text":"176"},[742,754],"[deviceData, deviceLogs]"]